<?xml version="1.0"?>
<launch> 

	<arg name="name" default="yumi" doc="The robot name. Ensure this is the same name you give to the arm in the urdf instance."/>
	
	<!-- Load joint controller configurations from YAML file to parameter server -->
	<rosparam file="$(find yumi_control)/config/traj_controllers.yaml" command="load" ns="/yumi"/>
	<rosparam file="$(find yumi_control)/config/gripper_controllers.yaml" command="load" ns="/yumi"/>
	<arg name="arm_controllers" default="joint_state_controller 
									 joint_traj_vel_controller_l
									 joint_traj_vel_controller_r"/>
	<arg name="gripper_controllers" default="gripper_effort_controller_r
											 gripper_effort_controller_l"/>
	<node name="arm_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="$(arg arm_controllers)" ns="/yumi"/>
	<node name="gripper_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="$(arg gripper_controllers)" ns="/yumi"/>

	<!--  Hardware interfaces for the joints and grippers -->
    <arg name="arms_hardware_interface" default="VelocityJointInterface"/>
    <arg name="grippers_hardware_interface" default="EffortJointInterface"/>

	<!-- URDF / SRDF parameters -->
	<arg name="yumi_setup" default="default"/>
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find yumi_description)/urdf/yumi.urdf.xacro' arms_interface:=$(arg arms_hardware_interface) grippers_interface:=$(arg grippers_hardware_interface) yumi_setup:=$(arg yumi_setup)" />
    <arg name="yumi_initial_pos" default="-J yumi_joint_1_l -1.41 
    									  -J yumi_joint_2_l -2.1
    									  -J yumi_joint_3_l 0.30
    									  -J yumi_joint_4_l 0.0
    									  -J yumi_joint_5_l 0.0
    									  -J yumi_joint_6_l 0.0
    									  -J yumi_joint_7_l 0.71
    									  -J yumi_joint_1_r 1.41 
    									  -J yumi_joint_2_r -2.1
    									  -J yumi_joint_3_r 0.30
    									  -J yumi_joint_4_r 0.0
    									  -J yumi_joint_5_r 0.0
    									  -J yumi_joint_6_r 0.0
    									  -J yumi_joint_7_r -0.71"/>
	<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model yumi $(arg yumi_initial_pos) -param robot_description -unpause"  respawn="false" output="screen" />

	<!-- Configuration for debug  -->
	<arg name="debug" default="false"/>
	<arg unless="$(arg debug)" name="launch_prefix" value="" />
	<arg if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

	<!-- Call Gazebo -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
	    <arg name="paused" value="true"/>
	    <arg name="use_sim_time" value="true"/>
	    <arg name="gui" value="true"/>
	    <arg name="headless" value="false"/>
	    <arg name="debug" value="$(arg debug)" />
	</include>

	<!-- Joint state and robot state publisher calls -->
    <node name="yumi_joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
        <rosparam param="source_list">["/yumi/joint_states", "/yumi/gripper_states"]</rosparam>
    </node>
    <node name="yumi_robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
	<node name="grippers_remapper" pkg="yumi_hw" type="gazebo_grippers_remap.py" />


	<!-- moveit setting -->
	<param name="robot_description_semantic" textfile="$(find yumi_moveit_config)/config/yumi.srdf" />
	<group ns="robot_description_planning">
		<rosparam command="load" file="$(find yumi_moveit_config)/config/joint_limits.yaml"/>
	</group>
	<group ns="robot_description_kinematics">
		<rosparam command="load" file="$(find yumi_moveit_config)/config/kinematics.yaml"/>
	</group>

	<arg name="planning_adapters" value="default_planner_request_adapters/AddTimeParameterization
						default_planner_request_adapters/FixWorkspaceBounds
						default_planner_request_adapters/FixStartStateBounds
						default_planner_request_adapters/FixStartStateCollision
						default_planner_request_adapters/FixStartStatePathConstraints" />

	<node name="move_group"  pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="">
		<!-- Set the display variable, in case OpenGL code is used internally -->
		<env name="DISPLAY" value="$(optenv DISPLAY :0)" />

		<!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
		<param name="planning_scene_monitor/publish_planning_scene" value="true" />
		<param name="planning_scene_monitor/publish_geometry_updates" value="true" />
		<param name="planning_scene_monitor/publish_state_updates" value="true" />
		<param name="planning_scene_monitor/publish_transforms_updates" value="true" />

		<!-- controller config -->
		<param name="moveit_controller_manager" value="moveit_simple_controller_manager/MoveItSimpleControllerManager"/>
		<rosparam file="$(find yumi_moveit_config)/config/controllers.yaml"/>

		<!-- planning config -->
		<param name="planning_plugin" value="ompl_interface/OMPLPlanner" />
		<param name="request_adapters" value="$(arg planning_adapters)" />
		<param name="start_state_max_bounds_error" value="0.1" />
		<rosparam command="load" file="$(find yumi_moveit_config)/config/ompl_planning.yaml"/>
	</node>

	<!-- Show robot in Rviz   -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find yumi_description)/yumi.rviz"/>

</launch>